/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * Laravel
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import type {
  PatchApiV1ClientUserEmailBody,
  PatchApiV1ClientUserPasswordBody,
  PostApiV1ClientAuthLoginBody,
  PostApiV1ClientAuthRegisterBody,
  PutApiV1ClientUserBody
} from '.././models'
import { customFetch } from '../../../custom-fetch';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const postApiV1ClientAuthRegister = (
    postApiV1ClientAuthRegisterBody: PostApiV1ClientAuthRegisterBody,
 options?: SecondParameter<typeof customFetch>,) => {
      
      
      return customFetch<unknown>(
      {url: `/api/v1/client/auth/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postApiV1ClientAuthRegisterBody
    },
      options);
    }
  


export const getPostApiV1ClientAuthRegisterMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1ClientAuthRegister>>, TError,{data: PostApiV1ClientAuthRegisterBody}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1ClientAuthRegister>>, TError,{data: PostApiV1ClientAuthRegisterBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1ClientAuthRegister>>, {data: PostApiV1ClientAuthRegisterBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1ClientAuthRegister(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1ClientAuthRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1ClientAuthRegister>>>
    export type PostApiV1ClientAuthRegisterMutationBody = PostApiV1ClientAuthRegisterBody
    export type PostApiV1ClientAuthRegisterMutationError = unknown

    export const usePostApiV1ClientAuthRegister = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1ClientAuthRegister>>, TError,{data: PostApiV1ClientAuthRegisterBody}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1ClientAuthRegister>>,
        TError,
        {data: PostApiV1ClientAuthRegisterBody},
        TContext
      > => {

      const mutationOptions = getPostApiV1ClientAuthRegisterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const postApiV1ClientAuthLogin = (
    postApiV1ClientAuthLoginBody: PostApiV1ClientAuthLoginBody,
 options?: SecondParameter<typeof customFetch>,) => {
      
      
      return customFetch<unknown>(
      {url: `/api/v1/client/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postApiV1ClientAuthLoginBody
    },
      options);
    }
  


export const getPostApiV1ClientAuthLoginMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1ClientAuthLogin>>, TError,{data: PostApiV1ClientAuthLoginBody}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1ClientAuthLogin>>, TError,{data: PostApiV1ClientAuthLoginBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1ClientAuthLogin>>, {data: PostApiV1ClientAuthLoginBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1ClientAuthLogin(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1ClientAuthLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1ClientAuthLogin>>>
    export type PostApiV1ClientAuthLoginMutationBody = PostApiV1ClientAuthLoginBody
    export type PostApiV1ClientAuthLoginMutationError = unknown

    export const usePostApiV1ClientAuthLogin = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1ClientAuthLogin>>, TError,{data: PostApiV1ClientAuthLoginBody}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1ClientAuthLogin>>,
        TError,
        {data: PostApiV1ClientAuthLoginBody},
        TContext
      > => {

      const mutationOptions = getPostApiV1ClientAuthLoginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const putApiV1ClientUser = (
    putApiV1ClientUserBody?: PutApiV1ClientUserBody,
 options?: SecondParameter<typeof customFetch>,) => {
      
      
      return customFetch<unknown>(
      {url: `/api/v1/client/user`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: putApiV1ClientUserBody
    },
      options);
    }
  


export const getPutApiV1ClientUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiV1ClientUser>>, TError,{data: PutApiV1ClientUserBody}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof putApiV1ClientUser>>, TError,{data: PutApiV1ClientUserBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiV1ClientUser>>, {data: PutApiV1ClientUserBody}> = (props) => {
          const {data} = props ?? {};

          return  putApiV1ClientUser(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiV1ClientUserMutationResult = NonNullable<Awaited<ReturnType<typeof putApiV1ClientUser>>>
    export type PutApiV1ClientUserMutationBody = PutApiV1ClientUserBody
    export type PutApiV1ClientUserMutationError = unknown

    export const usePutApiV1ClientUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiV1ClientUser>>, TError,{data: PutApiV1ClientUserBody}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationResult<
        Awaited<ReturnType<typeof putApiV1ClientUser>>,
        TError,
        {data: PutApiV1ClientUserBody},
        TContext
      > => {

      const mutationOptions = getPutApiV1ClientUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const patchApiV1ClientUserPassword = (
    patchApiV1ClientUserPasswordBody: PatchApiV1ClientUserPasswordBody,
 options?: SecondParameter<typeof customFetch>,) => {
      
      
      return customFetch<unknown>(
      {url: `/api/v1/client/user/password`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchApiV1ClientUserPasswordBody
    },
      options);
    }
  


export const getPatchApiV1ClientUserPasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiV1ClientUserPassword>>, TError,{data: PatchApiV1ClientUserPasswordBody}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof patchApiV1ClientUserPassword>>, TError,{data: PatchApiV1ClientUserPasswordBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchApiV1ClientUserPassword>>, {data: PatchApiV1ClientUserPasswordBody}> = (props) => {
          const {data} = props ?? {};

          return  patchApiV1ClientUserPassword(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchApiV1ClientUserPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof patchApiV1ClientUserPassword>>>
    export type PatchApiV1ClientUserPasswordMutationBody = PatchApiV1ClientUserPasswordBody
    export type PatchApiV1ClientUserPasswordMutationError = unknown

    export const usePatchApiV1ClientUserPassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiV1ClientUserPassword>>, TError,{data: PatchApiV1ClientUserPasswordBody}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationResult<
        Awaited<ReturnType<typeof patchApiV1ClientUserPassword>>,
        TError,
        {data: PatchApiV1ClientUserPasswordBody},
        TContext
      > => {

      const mutationOptions = getPatchApiV1ClientUserPasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const patchApiV1ClientUserEmail = (
    patchApiV1ClientUserEmailBody: PatchApiV1ClientUserEmailBody,
 options?: SecondParameter<typeof customFetch>,) => {
      
      
      return customFetch<unknown>(
      {url: `/api/v1/client/user/email`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchApiV1ClientUserEmailBody
    },
      options);
    }
  


export const getPatchApiV1ClientUserEmailMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiV1ClientUserEmail>>, TError,{data: PatchApiV1ClientUserEmailBody}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof patchApiV1ClientUserEmail>>, TError,{data: PatchApiV1ClientUserEmailBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchApiV1ClientUserEmail>>, {data: PatchApiV1ClientUserEmailBody}> = (props) => {
          const {data} = props ?? {};

          return  patchApiV1ClientUserEmail(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchApiV1ClientUserEmailMutationResult = NonNullable<Awaited<ReturnType<typeof patchApiV1ClientUserEmail>>>
    export type PatchApiV1ClientUserEmailMutationBody = PatchApiV1ClientUserEmailBody
    export type PatchApiV1ClientUserEmailMutationError = unknown

    export const usePatchApiV1ClientUserEmail = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiV1ClientUserEmail>>, TError,{data: PatchApiV1ClientUserEmailBody}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationResult<
        Awaited<ReturnType<typeof patchApiV1ClientUserEmail>>,
        TError,
        {data: PatchApiV1ClientUserEmailBody},
        TContext
      > => {

      const mutationOptions = getPatchApiV1ClientUserEmailMutationOptions(options);

      return useMutation(mutationOptions);
    }
    